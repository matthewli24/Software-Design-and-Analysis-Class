/******************************************************************************
  Title          : hotspot.h
  Author         : Matthew Li
  Created on     : October 21, 2017
  Description    : Interface for the Hotspot class
  Purpose        : The Hotspot class represents a hotspot object
  Modifications  : 

******************************************************************************/
#ifndef HOTSPOT_H__
#define HOTSPOT_H__

#include "command.h" 

#include <vector>
#include <string>
#include <iostream>

using namespace std;

/*******************************************************************************   
                           HOTSPOT CLASS INTERFACE
*******************************************************************************/

class Hotspot
{
    public:
        //Default constructor; fills fields with zero or null strings
        Hotspot();

        //Constructor that creates Hotspot objects from a hotspot file text file
        //@pre - the string s is a valid hotspot record
        //post - parses the fields in the record and store to private members
        Hotspot(const string s);

        //Copy constructor
        //@pre  - the object arg is a valid Hotspot object
        //@post - copies the private members of object to the new object created
        Hotspot(const Hotspot &object);

        //Constructor to create a Hotspot object from nine separate data values
        Hotspot(int    objectId, 
                string boro,
                string type,
                string provider,
                string name,
                string location,
                double latitude,
                double longitude,
                string ssid);

        //set() - sets all the nine private data members of the args
        void set(int    objectId, 
                 string boro,
                 string type,
                 string provider,
                 string name,
                 string location,
                 double latitude,
                 double longitude,
                 string ssid);

        //get - gets nine private data members and return the args by reference
        void get(int    &objectId, 
                 string &boro,
                 string &type,
                 string &provider,
                 string &name,
                 string &location,
                 double &latitude,
                 double &longitude,
                 string &ssid);

        //returns the objectId
        int get_id();
        
        /* string_parser() - parses a valid hotspot record in string format
         * @param string record [in] - a valid hotspot record
         * @param vector<string> vec [inout] - holds each field of record
         * @pre  - assume in the record string is in valid format
         *         <objId,boro,type,provider,name,location,lat,long,ssid>
         * @post - parse each field and store it in a vector
         * */
        void string_parser(const string record, vector<string> &vec);

        /* print() - prints the hotspot data onto a given stream
         * @para ostream s [inout] - ostream open fir writing
         * @pre  - the object has valid data 
         * @post - if the object has valid data, write to ostream in CSV format
         * */
        void print(ostream &s);

        /*  Two friend comparison operators:
         *  bool operator<(lt, rt) is true if and only if: lt.ObjectId<rt.ObjectId
         *  bool operator==(lt, rt) is true if and only if: lt.ObjectId==rt.ObjectId
         * */
        friend bool operator<  (const Hotspot &lt, const Hotspot &rt);
        friend bool operator== (const Hotspot &lt, const Hotspot &rt);
        
        /*Three more friend comparision operators to compare Hotspot objects to ints*/
        friend bool operator<  (const int &objectId, const Hotspot &item);
        friend bool operator<  (const Hotspot &item, const int &objectId);
        friend bool operator== (const int &objectId, const Hotspot &item); 

    private:
        int    objectId;  //id number automatically generated by ArcMap software
        string boro;      //MN, BX, BK, QU, SI
        string type;      //type of wifi provide eg. Free
        string provider;  //the Franchise providing the WiFi connection
        string name;      //the name of the location where the WiFi is located  
        string location;  //a brief description of where the WiFi point is
        double latitude;  //Lat: Points that fall north or south of the Equator
        double longitude; //Long: Points that fall east or west of the Equator
        string ssid;      //the name of the WiFi seen on people's devices 

};

#endif //end of HOTSPOT_H
